// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCC.Infra.Data.Context;

#nullable disable

namespace TCC.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231029161948_populateItens")]
    partial class populateItens
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TCC.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.Aula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ContentUrl")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("QtdMoedas")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("TCC.Domain.Models.Curso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("Duracao")
                        .HasColumnType("bigint");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NivelCurso")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("QtdMoeda")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("TCC.Domain.Models.Exercicio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AlternativaA")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AlternativaB")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AlternativaC")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AlternativaD")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<Guid?>("AulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("QtdMoedas")
                        .HasColumnType("int");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.ToTable("Exercicios");
                });

            modelBuilder.Entity("TCC.Domain.Models.ItemLoja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("Duracao")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Multiplicador")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Preco")
                        .HasColumnType("int");

                    b.Property<long>("QtdXp")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoItem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Itens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b84bf61a-d7a9-44b2-91b0-53c75baa815a"),
                            Descricao = "Boost de XP de 75%",
                            Duracao = 2592000000000L,
                            ImagemUrl = "75-XP.png",
                            Multiplicador = 0.75m,
                            Nome = "Boost de XP",
                            Preco = 500,
                            QtdXp = 0L,
                            TipoItem = 1
                        },
                        new
                        {
                            Id = new Guid("40e76097-4f16-4015-bd96-fbd261420721"),
                            Descricao = "Boost de XP de 50%",
                            Duracao = 2592000000000L,
                            ImagemUrl = "50-XP.png",
                            Multiplicador = 0.50m,
                            Nome = "Boost de XP",
                            Preco = 400,
                            QtdXp = 0L,
                            TipoItem = 1
                        },
                        new
                        {
                            Id = new Guid("b1270d2c-b633-4ae4-bdfc-bc45521dd099"),
                            Descricao = "Boost de XP de 25%",
                            Duracao = 2592000000000L,
                            ImagemUrl = "25-XP.png",
                            Multiplicador = 0.25m,
                            Nome = "Boost de XP",
                            Preco = 300,
                            QtdXp = 0L,
                            TipoItem = 1
                        },
                        new
                        {
                            Id = new Guid("9b111811-8bfb-45c7-b5c4-ac4be98d4459"),
                            Descricao = "Receba 250 em XP",
                            Duracao = 0L,
                            ImagemUrl = "250-XP.png",
                            Multiplicador = 0m,
                            Nome = "Pacote de XP",
                            Preco = 450,
                            QtdXp = 250L,
                            TipoItem = 2
                        },
                        new
                        {
                            Id = new Guid("d7cb2122-27d9-4cca-92f5-3247ab268811"),
                            Descricao = "Receba 500 em XP",
                            Duracao = 0L,
                            ImagemUrl = "500-XP.png",
                            Multiplicador = 0m,
                            Nome = "Pacote de XP",
                            Preco = 900,
                            QtdXp = 500L,
                            TipoItem = 2
                        },
                        new
                        {
                            Id = new Guid("6a12b8ec-b131-4646-a696-cc450543cacb"),
                            Descricao = "Receba 1000 em XP",
                            Duracao = 0L,
                            ImagemUrl = "1000-XP.png",
                            Multiplicador = 0m,
                            Nome = "Pacote de XP",
                            Preco = 1800,
                            QtdXp = 1000L,
                            TipoItem = 2
                        });
                });

            modelBuilder.Entity("TCC.Domain.Models.PedidoLoja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemCompradoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemCompradoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("TCC.Domain.Models.ProgressoAula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("CursoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Progressos");
                });

            modelBuilder.Entity("TCC.Domain.Models.RespostaAlunoExercicio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExercicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgressoAulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("ProgressoAulaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RespostasAlunoExercicios");
                });

            modelBuilder.Entity("TCC.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MultiplicadorXp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("QtdMoedas")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("TCC.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("TCC.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("TCC.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("TCC.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCC.Domain.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("TCC.Domain.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCC.Domain.Models.Aula", b =>
                {
                    b.HasOne("TCC.Domain.Models.Curso", "Curso")
                        .WithMany("Aulas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("TCC.Domain.Models.Exercicio", b =>
                {
                    b.HasOne("TCC.Domain.Models.Aula", null)
                        .WithMany("Exercicios")
                        .HasForeignKey("AulaId");
                });

            modelBuilder.Entity("TCC.Domain.Models.PedidoLoja", b =>
                {
                    b.HasOne("TCC.Domain.Models.ItemLoja", "ItemComprado")
                        .WithMany()
                        .HasForeignKey("ItemCompradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC.Domain.Models.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemComprado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TCC.Domain.Models.ProgressoAula", b =>
                {
                    b.HasOne("TCC.Domain.Models.Aula", "Aula")
                        .WithMany()
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC.Domain.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("Curso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TCC.Domain.Models.RespostaAlunoExercicio", b =>
                {
                    b.HasOne("TCC.Domain.Models.Exercicio", "Exercicio")
                        .WithMany()
                        .HasForeignKey("ExercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC.Domain.Models.ProgressoAula", "ProgressoAula")
                        .WithMany("RespostasExercicios")
                        .HasForeignKey("ProgressoAulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("ProgressoAula");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TCC.Domain.Models.Aula", b =>
                {
                    b.Navigation("Exercicios");
                });

            modelBuilder.Entity("TCC.Domain.Models.Curso", b =>
                {
                    b.Navigation("Aulas");
                });

            modelBuilder.Entity("TCC.Domain.Models.ProgressoAula", b =>
                {
                    b.Navigation("RespostasExercicios");
                });

            modelBuilder.Entity("TCC.Domain.Models.Usuario", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
